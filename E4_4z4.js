/*Реализовать следующее консольное приложение подобно примеру, который 
разбирался в видео. Реализуйте его на прототипах.

Определить иерархию электроприборов. Включить некоторые в розетку. 
Посчитать потребляемую мощность. 

Таких приборов должно быть, как минимум, два (например, настольная лампа 
и компьютер). Выбрав прибор, подумайте, какими свойствами он обладает.

План:

Определить родительскую функцию с методами, которые включают/выключают 
прибор из розетки.
Создать делегирующую связь [[Prototype]] для двух конкретных приборов.
У каждого из приборов должны быть собственные свойства и, желательно, 
методы, отличные от родительских методов.
Создать экземпляры каждого прибора.
Вывести в консоль и посмотреть результаты работы, гордиться собой. :)
Общие требования:

Имена функций, свойств и методов должны быть информативными.
Соблюдать best practices:
использование camelCase нотации для переменных и методов, PascalCase 
для названия функций-конструкторов и классов;
информативные имена (а не a, b);
четкая связь между классом и его экземплярами (класс описывает множество, 
а экземпляр конкретную реализацию);
использование синтаксиса ES6 (кроме функции-конструкторов) и т. д.*/

function Device(power, getOnOff) {
  this.power = power;
  this.getOnOff = [0, 1];
  this.nameDevice = "";
}

const comp = new Device(400, 1);

const lamp = new Device(80, 1);

comp.nameDevice = "Computer";
lamp.nameDevice = "Lamp";

const pow1 = () => {
  if (comp.getOnOff !== 0) {
    comp.power;
  } else {
    0;
  }
};
const pow2 = () => {
  if (lamp.getOnOff != 0) {
    lamp.power;
  } else {
    0;
  }
sumPower = pow1 + pow2;
console.log(pow1, pow2);
console.log('общая потребляемая мошьность: ${sumPower}Вт');

  function SortDevice() {
    if (comp.power > lamp.power) {
      console.log(
        "List of consumers by reduction: 1. ${comp.nameDevice} 2. ${lamp.nameDevice}"
      );
    } else {
      console.log(
        "List of consumers by reduction: 1. ${lamp.nameDevice} 2. ${comp.nameDevice}"
      );
    }
  }
};
